h3 {
  grid-area: header;
  margin: 1rem 0 2rem;
}

[data-glyph] {
  color: lighten($brown, 10%);
  cursor: pointer;
  font-size: 124px;
  position: relative;
  transition: all 0.25s;

  & + div {
    @extend %mirrorskew;
    em {
      background: url('img/mirror.webp') 50% 50% no-repeat;
      background-size: contain;
      color: $brown;
      display: block;
      filter: drop-shadow(0 -0.5rem 1rem rgba(#000, 0.2));
      font-size: 124px;
      font-style: normal;
      margin-top: -5px;
      opacity: 0.85;
      transform: rotateX(-20deg);
      width: 120px;
    }
    i {
      font-style: normal;
    }
  }

  &:after {
    animation: rotate 0.5s steps(5) infinite;
    background: url('img/textgrain.webp') 50% 50%;
    bottom: 0;
    content: '';
    left: 0;
    pointer-events: none;
    position: absolute;
    right: 0;
    top: 0;
  }
}

@keyframes rotate {
  to {
    transform: rotate(360deg);
  }
}


label:hover + div {
  opacity: 1;
  perspective: 225px;
  transform: scaleY(-1.1) scaleX(1.1) translateY(0);
  visibility: visible;
  z-index: 500;
}

section {
  :checked + label {
    color: rgba($brown, 0.2);
    text-shadow: none;
    pointer-events: none;
    + div {
      opacity: 0;
      perspective: 225px;
      transform: scaleY(-1.1) scaleX(1.1) translateY(0);
      visibility: visible;
      z-index: 400;
      + embed {
        display: revert
      }
    }
  }

  @for $puzzle from 1 through 10 {
    .w#{$puzzle}:checked + label {
      color: $red;
      text-shadow: 0 0 1rem rgba($red, 0.3);
    }
  }
}

@for $puzzle from 1 through 10 {
  .p#{$puzzle} {
    display: none;
  }
}

@for $in from 1 through 10 {
  .g#{$in} {
    animation: enter 0.5s 2s 1 both;
  }
}

@for $puzzle from 1 through 10 {
  #p#{$puzzle}g1:checked {
    animation: exit 0.5s 0.5s 1 both;
    pointer-events: none;

    ~ embed[class="s#{$puzzle}"] {
      display: revert;
    }

    ~ .p#{$puzzle + 1} {
      display: block;
    }
  }
}

@for $puzzle from 1 through 10 {
  @for $out from 1 through 7 {
    #p#{$puzzle}g1:checked ~ .p#{$puzzle}.g#{$out} {
      animation: exit 0.5s 0.5s 1 both;
      pointer-events: none;
    }

    @if $out > 1 {
      #p#{$puzzle}g1:checked ~ .p#{$puzzle}.r#{$out} {
        opacity: 0;
        pointer-events: none;
        visibility: hidden;
      }
    }
  }

  // Only the matching mirror
  #p#{$puzzle}g1:checked ~ .p#{$puzzle}.r1 {
    animation: exitMirror 0.5s 0.5s 1 both;
    pointer-events: none;
  }
}

@keyframes enter {
  from {
    opacity: 0;
    transform: translateX($pX);
    visibility: hidden;
  }

  to {
    opacity: 1;
    transform: translateX(0);
    visibility: visible;
  }
}

@keyframes exit {
  from {
    opacity: 1;
    transform: translateX(0);
    visibility: visible;
  }

  to {
    opacity: 0;
    transform: translateX(-$pX);
    visibility: hidden;
  }
}

@keyframes exitMirror {
  from {
    opacity: 1;
    transform: translateX(0) scaleY(-1.1) scaleX(1.1) translateY(0);
    visibility: visible;
  }

  to {
    opacity: 0;
    transform: translateX(-$pX) scaleY(-1.1) scaleX(1.1) translateY(0);
    visibility: hidden;
  }
}
