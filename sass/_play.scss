h3 {
  grid-area: header;
  margin: 1rem 0 2rem;
}

[data-glyph] {
  color: lighten($brown, 10%);
  cursor: pointer;
  font-size: 124px;
  line-height: 1.45;
  transition: all 0.25s;

  & + div {
    opacity: 0;
    perspective: 100px;
    perspective-origin: 50% 25%;
    transform: scaleY(-1) translateY(-0.25rem);
    transition: all 0.25s 0.25s;
    visibility: hidden;
    em {
      background: url('img/mirror.png') 50% 50% no-repeat;
      background-size: contain;
      color: $brown;
      display: block;
      filter: drop-shadow(0 -0.5rem 1rem rgba(#000, 0.2));
      font-size: 124px;
      font-style: normal;
      line-height: 1;
      margin-top: -5px;
      opacity: 0.85;
      padding-top: 58px;
      transform: rotateX(-20deg);
    }
  }
}

label:hover + div {
  opacity: 1;
  perspective: 225px;
  transform: scaleY(-1) translateY(0);
  visibility: visible;
  z-index: 500;
}

section {
  :checked + label {
    color: $red;
    text-shadow: 0 0 1rem rgba($red, 0.3);
  }

  :checked + label + div {
    opacity: 1;
    perspective: 225px;
    transform: scaleY(-1) translateY(0);
    visibility: visible;
    z-index: 400;
  }
}

@for $puzzle from 1 through 10 {
  .p#{$puzzle} {
    display: none;
  }
}

@for $in from 1 through 10 {
  .g#{$in} {
    animation: enter 0.5s 2s 1 both;
  }
}

@for $puzzle from 1 through 10 {
  #p#{$puzzle}g1:checked {
    animation: exit 0.5s 0.5s 1 both;
    pointer-events: none;

    ~ embed[class="s#{$puzzle}"] {
      display: revert;
    }

    ~ .p#{$puzzle + 1} {
      display: block;
    }
  }
}

@for $puzzle from 1 through 10 {
  @for $out from 1 through 10 {
    #p#{$puzzle}g1:checked ~ .p#{$puzzle}.g#{$out} {
      animation: exit 0.5s 0.5s 1 both;
      pointer-events: none;
    }

    @if $out > 1 {
      #p#{$puzzle}g1:checked ~ .p#{$puzzle}.r#{$out} {
        opacity: 0;
        pointer-events: none;
        visibility: hidden;
      }
    }
  }

  // Only the matching mirror
  #p#{$puzzle}g1:checked ~ .p#{$puzzle}.r1 {
    animation: exitMirror 0.5s 0.5s 1 both;
    pointer-events: none;
  }
}

@keyframes enter {
  from {
    opacity: 0;
    transform: translateX($pX);
    visibility: hidden;
  }

  to {
    opacity: 1;
    transform: translateX(0);
    visibility: visible;
  }
}

@keyframes exit {
  from {
    opacity: 1;
    transform: translateX(0);
    visibility: visible;
  }

  to {
    opacity: 0;
    transform: translateX(-$pX);
    visibility: hidden;
  }
}

@keyframes exitMirror {
  from {
    opacity: 1;
    transform: translateX(0) scaleY(-1) translateY(0);
    visibility: visible;
  }

  to {
    opacity: 0;
    transform: translateX(-$pX) scaleY(-1) translateY(0);
    visibility: hidden;
  }
}
